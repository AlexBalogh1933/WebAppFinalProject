@page "/transactionList"
@using LibrarySystem.Models
@inject HttpClient http
@inject NavigationManager navigation

<h3>List of Transactions</h3>
<FluentStack Orientation="Orientation.Horizontal">
    <FluentCard>
        <FindLateTransactionsComponent Transactions="@Transactions" OnFindNotReturnedBooksClick="handleShowLateBooks" />
        <br />
        <br />

        <FluentButton OnClick="@(()=> navigation.NavigateTo("/addTransaction"))">Add Transaction</FluentButton>

    </FluentCard>
</FluentStack>

<FluentDataGrid Items="@Transactions">
    <PropertyColumn Property="@(b => b.TransactionId)" Sortable="true" />
    <PropertyColumn Title="Date Returned" Property="@(b => (b.ReturnDate == null ? "Not Returned" : b.ReturnDate.ToString()))" Sortable="true" />
    <PropertyColumn Title="Date Borrowed" Property="@(b => b.DateBorrowed)" Sortable="true" />
    <PropertyColumn Title="Days Allowed To Borrow Book" Property="@(b => b.TotalDaysAllowedToBorrow)" Sortable="true" />

    <TemplateColumn>
        <FluentButton OnClick="@(()=> navigation.NavigateTo($"/transactionDetails/{context.TransactionId}"))">Edit</FluentButton>
        <FluentButton OnClick="@(()=> RemoveTransaction(context.TransactionId))">Remove</FluentButton>
    </TemplateColumn>
</FluentDataGrid>

@code {
    public IQueryable<TransactionViewModel>? Transactions { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Transactions = (await http.GetFromJsonAsync<List<TransactionViewModel>>("api/transactions"))?.AsQueryable();
    }

    private async Task RemoveTransaction(int id)
    {
        await http.DeleteAsync($"/api/transaction/{id}");
        Transactions = (await http.GetFromJsonAsync<List<TransactionViewModel>>("api/transactions"))?.AsQueryable();
    }

    private void handleShowLateBooks(IQueryable<TransactionViewModel> transactionViewModels)
    {
        Transactions = transactionViewModels;
        StateHasChanged();
    }

}
