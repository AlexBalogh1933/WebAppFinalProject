@page "/booklist"
@using LibrarySystem.Models
@inject HttpClient http
@inject NavigationManager navigation

<h3>Current Books</h3>

<FluentCard Width="Auto" Height="Auto">
    <FluentStack Orientation="Orientation.Vertical">
        <FluentCard>
            <FluentSearch Placeholder="Search Book" @oninput="FindBook" AriaLabel="Search" />

            <br />
            <br />

            <FluentSelect ValueChanged="@(e => FilterSearchOption = e)" TOption="string">
                <FluentIcon Value="@(new Icons.Regular.Size16.SearchVisual())" Color="@Color.Neutral" Slot="indicator" />

                <FluentOption Value="title">Search Parameter Options</FluentOption>

                <FluentOption Value="title">Title</FluentOption>
                <FluentOption Value="genre">Genre</FluentOption>
                <FluentOption Value="authorFirstName">Author's Firstname</FluentOption>
                <FluentOption Value="authorLastName">Author's Lastname</FluentOption>
            </FluentSelect>

            <br />
            <br />

            <FindLikedBookComponent BookQuery="@BookQuery" OnTop3LikedBooksClick="HandleShowLikedBooks" />

            <br />
            <br />

            <FluentButton OnClick="@(()=> navigation.NavigateTo("/addBook"))">Add Book</FluentButton>

            <br />
            <br />

            <FluentAccordionItem Heading="Column Filters">
                <FluentIcon Value="@(new Icons.Regular.Size20.Filter())" Color="@Color.Neutral" Slot="start" />
                <FluentCheckbox @bind-Value="hideAuthorInfo">Hide Author Info</FluentCheckbox>
                <FluentCheckbox @bind-Value="hideBookRating">Hide Book Rating</FluentCheckbox>
                <FluentCheckbox @bind-Value="hidePublisherInfo">Hide Publisher Info</FluentCheckbox>
            </FluentAccordionItem>

        </FluentCard>
    </FluentStack>
</FluentCard>

<FluentDataGrid Items="@BookQuery">

    <PropertyColumn Property="@(b => b.Item2.Title)" Sortable="true" />
    <PropertyColumn Property="@(b => b.Item2.Genre)" Sortable="true" />


    @if (!hideAuthorInfo)
    {
        <PropertyColumn Title="Author's First Name" Property="@(b => b.Item1.FirstName)" Sortable="true" />
        <PropertyColumn Title="Author's Last Name" Property="@(b =>  b.Item1.LastName)" Sortable="true" />
    }

    @if (!hideBookRating)
    {
        <PropertyColumn Title="Total Dislikes" Property="@(b =>  b.Item2.NumberOfDislikes)" Sortable="true" />
        <PropertyColumn Title="Total Likes" Property="@(b =>  b.Item2.NumberOfLikes)" Sortable="true" />
    }

    @if (!hidePublisherInfo)
    {
        <PropertyColumn Title="Publisher's Name" Property="@(b => b.Item3.Name)" Sortable="true" />
        <PropertyColumn Title="Publisher's Address" Property="@(b =>  b.Item3.Address)" Sortable="true" />
        <PropertyColumn Title="Date Published" Property="@(b =>  b.Item3.EstablishedYear)" Sortable="true" />
    }

    <TemplateColumn>
        <FluentButton OnClick="@(()=> navigation.NavigateTo($"/bookDetails/{context.Item2.BookId}"))">Edit</FluentButton>
        <FluentButton OnClick="@(()=> RemoveBook(context.Item2))">Remove</FluentButton>
    </TemplateColumn>

</FluentDataGrid>

@code {
    IQueryable<Tuple<AuthorViewModel, BookViewModel, PublisherViewModel>>? BookQuery { get; set; }

    private bool displayBook = true;

    bool hideBookRating = false;
    bool hideAuthorInfo = false;
    bool hidePublisherInfo = false;

    string? FilterSearchOption = "title";

    private async Task FindBook(ChangeEventArgs args)
    {
        var input = args.Value?.ToString();

        await SetBookQuery();

        if (FilterSearchOption == "title")
        {
            BookQuery = BookQuery.Where(b => b.Item2.Title.ToLower().StartsWith(input)).AsQueryable();
        }
        else if (FilterSearchOption == "genre")
        {
            BookQuery = BookQuery.Where(b => b.Item2.Genre.ToLower().StartsWith(input)).AsQueryable();
        }
        else if (FilterSearchOption == "authorFirstName")
        {
            BookQuery = BookQuery.Where(b => b.Item1.FirstName.ToLower().StartsWith(input)).AsQueryable();
        }
        else if (FilterSearchOption == "authorLastName")
        {
            BookQuery = BookQuery.Where(b => b.Item1.LastName.ToLower().StartsWith(input)).AsQueryable();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await SetBookQuery();
    }

    public async Task SetBookQuery()
    {
        var booksTable = (await http.GetFromJsonAsync<List<BookViewModel>>("api/books"))?.AsQueryable();
        var authorTable = (await http.GetFromJsonAsync<List<AuthorViewModel>>("api/authors"))?.AsQueryable();
        var authorBookTable = (await http.GetFromJsonAsync<List<AuthorBookViewModel>>("api/authorbooks"))?.AsQueryable();
        var publisherTable = (await http.GetFromJsonAsync<List<PublisherViewModel>>("api/publishers"))?.AsQueryable();

        BookQuery = (from book in booksTable
                     join authorbook in authorBookTable on book.BookId equals authorbook.BookId
                     join author in authorTable on authorbook.AuthorId equals author.AuthorId
                     join publisher in publisherTable on book.PublisherId equals publisher.PublisherId
                     select new Tuple<AuthorViewModel, BookViewModel, PublisherViewModel>(author, book, publisher)).AsQueryable();
    }


    private async Task RemoveBook(BookViewModel book)
    {
        await http.DeleteAsync($"/api/authorbook/{book.BookId}");
        await http.DeleteAsync($"/api/book/{book.BookId}");
        await SetBookQuery();

    }

    private void HandleShowLikedBooks(IQueryable<Tuple<AuthorViewModel, BookViewModel, PublisherViewModel>> top3LikedBooks)
    {
        
        BookQuery = top3LikedBooks;
        StateHasChanged();
    }

}
