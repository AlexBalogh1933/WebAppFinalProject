@page "/booklist"
@using LibrarySystem.Models
@inject HttpClient http
@inject NavigationManager navigation

<h3>Current Books</h3>

<FluentCard Width="Auto" Height="350px">
    <FluentStack Orientation="Orientation.Vertical">
        <FluentCard>

            <FluentTextField Label="Search Book" @oninput="FindBook"></FluentTextField>
            <br />
            <br />

            <FluentSelect Label="Search Parameter Options" ValueChanged="@(e => FilterSearchOption = e)" TOption="string">
                <FluentOption Value="author">Author</FluentOption>
                <FluentOption Value="title">Title</FluentOption>
                <FluentOption Value="genre">Genre</FluentOption>
                <FluentOption Value="publisher">Publisher</FluentOption>
            </FluentSelect>

            <br />
            <br />

            <FluentButton OnClick="@(()=> navigation.NavigateTo("/addBook"))">Add Book</FluentButton>

            <br />
            <br />

            <FluentCheckbox @bind-Value="hideTitleColumn">Hide Titles</FluentCheckbox>
            <FluentCheckbox @bind-Value="hideAuthorIdColumn">Hide Authors</FluentCheckbox>
            <FluentCheckbox @bind-Value="hidePublisherIdColumn">Hide Publishers</FluentCheckbox>
            <FluentCheckbox @bind-Value="hideGenreColumn">Hide Genres</FluentCheckbox>
            
        </FluentCard>
    </FluentStack>
</FluentCard>

<FluentDataGrid Items="@books">

    <PropertyColumn Property="@(b => b.BookId)" Sortable="true" />

    @if (!hideTitleColumn)
    {
        <PropertyColumn Property="@(b => b.Title)" Sortable="true" />
    }
    @if (!hideAuthorIdColumn)
    {
        <PropertyColumn Property="@(b => b.AuthorId)" Sortable="true" />
    }
    @if (!hidePublisherIdColumn)
    {
        <PropertyColumn Property="@(b => b.PublisherId)" Sortable="true" />
    }
    @if (!hideGenreColumn)
    {
        <PropertyColumn Property="@(b => b.Genre)" Sortable="true" />
    }

    <TemplateColumn>
        <FluentButton OnClick="@(()=> navigation.NavigateTo($"/bookDetails/{context.BookId}"))">Edit</FluentButton>
        <FluentButton OnClick="@(()=> RemoveBook(context.BookId))">Remove</FluentButton>
    </TemplateColumn>

</FluentDataGrid>

@code {
    public IQueryable<BookViewModel> books { get; set; }

    private bool displayBook = true;

    bool hideTitleColumn = false;
    bool hideGenreColumn = false;
    bool hidePublisherIdColumn = false;
    bool hideAuthorIdColumn = false;

    string? FilterSearchOption = "author";

    private async Task FindBook(ChangeEventArgs args)
    {
        var input = args.Value.ToString();


        if (string.IsNullOrWhiteSpace(input))
        {
            books = (await http.GetFromJsonAsync<List<BookViewModel>>("api/books")).AsQueryable();
        }
        else
        {
            books = (await http.GetFromJsonAsync<List<BookViewModel>>("api/books")).AsQueryable();

            // if (FilterSearchOption == "author")
            // {
            //     books = books.Where(b => b.Author.ToLower().StartsWith(input)).AsQueryable();
            // }
            if (FilterSearchOption == "title")
            {
                books = books.Where(b => b.Title.ToLower().StartsWith(input)).AsQueryable();
            }
            // else if (FilterSearchOption == "publisher")
            // {
            //     books = books.Where(b => b.Publisher.ToLower().StartsWith(input)).AsQueryable();
            // }
            else if (FilterSearchOption == "genre")
            {
                books = books.Where(b => b.Genre.ToLower().StartsWith(input)).AsQueryable();

            }
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        books = (await http.GetFromJsonAsync<List<BookViewModel>>("api/books")).AsQueryable();
    }

    private async Task RemoveBook(int bookId)
    {
        await http.DeleteAsync($"/api/book/{bookId}");
        books = (await http.GetFromJsonAsync<List<BookViewModel>>("api/books")).AsQueryable();
    }
}
