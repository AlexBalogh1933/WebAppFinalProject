@page "/booklist"
@using LibrarySystem.Models
@inject HttpClient http
@inject NavigationManager navigation

<h3>Current Books</h3>

<FluentCard Width="Auto" Height="Auto">
    <FluentStack Orientation="Orientation.Vertical">
        <FluentCard>

            <FluentTextField Label="Search Book" @oninput="FindBook"></FluentTextField>
            <br />
            <br />

            <FluentSelect Label="Search Parameter Options" ValueChanged="@(e => FilterSearchOption = e)" TOption="string">
                <FluentOption Value="title">Title</FluentOption>
                <FluentOption Value="genre">Genre</FluentOption>
                <FluentOption Value="authorFirstName">Author's Firstname</FluentOption>
                <FluentOption Value="authorLastName">Author's Lastname</FluentOption>
            </FluentSelect>

            <br />
            <br />

            <FindLikedBookComponent Books="@authorBook" onTop3LikedBooksClick="handleShowLikedBooks" />

            <br />
            <br />

            <FluentButton OnClick="@(()=> navigation.NavigateTo("/addBook"))">Add Book</FluentButton>

            <br />
            <br />

            <FluentCheckbox @bind-Value="hideTitleColumn">Hide Titles</FluentCheckbox>
            <FluentCheckbox @bind-Value="hideGenreColumn">Hide Genres</FluentCheckbox>
            <FluentCheckbox @bind-Value="hideAuthorFirstNameColumn">Hide Author's Firstname</FluentCheckbox>
            <br />

            <FluentCheckbox @bind-Value="hideAuthorLastNameColumn">Hide Author's Lastname</FluentCheckbox>
            <FluentCheckbox @bind-Value="hideNumberOfDislikes">Hide Author's Firstname</FluentCheckbox>
            <FluentCheckbox @bind-Value="hideNumberOfLikes">Hide Author's Lastname</FluentCheckbox>

        </FluentCard>
    </FluentStack>
</FluentCard>

<FluentDataGrid  Items="@authorBook">

    @if (!hideTitleColumn)
    {
        <PropertyColumn Property="@(b => b.Book.Title)" Sortable="true" />
    }
    @if (!hideGenreColumn)
    {
        <PropertyColumn Property="@(b => b.Book.Genre)" Sortable="true" />
    }
    @if (!hideNumberOfDislikes)
    {
        <PropertyColumn Title="Total Dislikes" Property="@(b =>  b.Book.NumberOfDislikes)" Sortable="true" />
    }
    @if (!hideNumberOfLikes)
    {
        <PropertyColumn Title="Total Likes" Property="@(b =>  b.Book.NumberOfLikes)" Sortable="true" />
    }
    @if (!hideAuthorFirstNameColumn)
    {
        <PropertyColumn Title="Author's First Name" Property="@(b => b.Author.FirstName)" Sortable="true" />
    }
    @if (!hideAuthorLastNameColumn)
    {
        <PropertyColumn Title="Author's Last Name" Property="@(b =>  b.Author.LastName)" Sortable="true" />
    }
    <TemplateColumn>
        <FluentButton OnClick="@(()=> navigation.NavigateTo($"/bookDetails/{context.Book.BookId}"))">Edit</FluentButton>
        <FluentButton OnClick="@(()=> RemoveBook(context.Book))">Remove</FluentButton>
    </TemplateColumn>

</FluentDataGrid>

@code {
    IQueryable<BookAuthorJoinViewModel> authorBook { get; set; }

    private bool displayBook = true;

    bool hideTitleColumn = false;
    bool hideGenreColumn = false;
    bool hideAuthorFirstNameColumn = false;
    bool hideAuthorLastNameColumn = false;
    bool hideNumberOfLikes = false;
    bool hideNumberOfDislikes= false;

    string? FilterSearchOption = "title";

    private async Task FindBook(ChangeEventArgs args)
    {
        var input = args.Value.ToString();

        var booksTable = (await http.GetFromJsonAsync<List<BookViewModel>>("api/books")).AsQueryable();
        var AuthorTable = (await http.GetFromJsonAsync<List<AuthorViewModel>>("api/authors")).AsQueryable();
        var AuthorBookTable = (await http.GetFromJsonAsync<List<AuthorBookViewModel>>("api/authorbooks")).AsQueryable();

        authorBook = 
            (from booktb in booksTable
            join authorbooktb in AuthorBookTable on booktb.BookId equals authorbooktb.BookId
            join authortb in AuthorTable on authorbooktb.AuthorId equals authortb.AuthorId
            select new BookAuthorJoinViewModel
            {
                Book = booktb,
                Author = authortb,

            }).AsQueryable();

        if (FilterSearchOption == "title")
        {
            authorBook = authorBook.Where(b => b.Book.Title.ToLower().StartsWith(input)).AsQueryable();
        }
        else if (FilterSearchOption == "genre")
        {
            authorBook = authorBook.Where(b => b.Book.Genre.ToLower().StartsWith(input)).AsQueryable();
        }
        else if (FilterSearchOption == "authorFirstName")
        {
            authorBook = authorBook.Where(b => b.Author.FirstName.ToLower().StartsWith(input)).AsQueryable();
        }
        else if (FilterSearchOption == "authorLastName")
        {
            authorBook = authorBook.Where(b => b.Author.LastName.ToLower().StartsWith(input)).AsQueryable();
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        var booksTable = (await http.GetFromJsonAsync<List<BookViewModel>>("api/books")).AsQueryable();
        var AuthorTable = (await http.GetFromJsonAsync<List<AuthorViewModel>>("api/authors")).AsQueryable();
        var AuthorBookTable = (await http.GetFromJsonAsync<List<AuthorBookViewModel>>("api/authorbooks")).AsQueryable();

        authorBook = (from booktb in booksTable
        join authorbooktb in AuthorBookTable on booktb.BookId equals authorbooktb.BookId
        join authortb in AuthorTable on authorbooktb.AuthorId equals authortb.AuthorId
        select new BookAuthorJoinViewModel
        {
            Book = booktb,
            Author = authortb,

        }).AsQueryable();
    }

    private async Task RemoveBook(BookViewModel book)
    {
        await http.DeleteAsync($"/api/book/{book.BookId}");
    }

    private void handleShowLikedBooks(IQueryable<BookAuthorJoinViewModel> top3LikedBooks)
    {
        authorBook = top3LikedBooks;
        StateHasChanged();
    }

}
