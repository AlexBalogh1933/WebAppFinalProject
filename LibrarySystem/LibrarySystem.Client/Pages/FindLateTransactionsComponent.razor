@using LibrarySystem.Models
@inject HttpClient http;

<FluentButton IconStart="@buttonIcon" OnClick="FindNotReturnedBooks">
    @buttonMessage
</FluentButton>

@code {
    [Parameter]
    public EventCallback<IQueryable<TransactionViewModel>> OnFindNotReturnedBooksClick { get; set; }

    [Parameter]
    public IQueryable<TransactionViewModel>? Transactions { get; set; }

    bool showingLateTransaction = false;
    string buttonMessage = "Show Late Transactions";
    Icon buttonIcon = new Icons.Regular.Size16.Hourglass();

    private async Task FindNotReturnedBooks()
    {
        if (showingLateTransaction)
        {
            var lateReturns =
            (from transaction in Transactions
             where (int)(DateTime.Now - transaction.DateBorrowed).Value.Days > transaction.TotalDaysAllowedToBorrow
             select transaction).AsQueryable();

            await OnFindNotReturnedBooksClick.InvokeAsync(lateReturns);
            showingLateTransaction = false;
            buttonMessage = "Show All Transactions";
            buttonIcon = new Icons.Regular.Size16.Clipboard();
        }
        else
        {
            var allTransactions = (await http.GetFromJsonAsync<List<TransactionViewModel>>("api/transactions")).AsQueryable();
            
            await OnFindNotReturnedBooksClick.InvokeAsync(allTransactions);
            showingLateTransaction = true;
            buttonMessage = "Show Late Transactions";
            buttonIcon = new Icons.Regular.Size16.Hourglass();
        }

    }
}
