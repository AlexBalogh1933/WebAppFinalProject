@page "/authorlist"
@using LibrarySystem.Models
@inject HttpClient http
@inject NavigationManager navigation

<h3>List of Authors</h3>

<FluentCard Width="Auto" Height="350px">
    <FluentStack Orientation="Orientation.Vertical">
        <FluentCard>

            <FluentTextField Label="Search Author" @oninput="FindAuthor"></FluentTextField>
            <br />
            <br />

            <FluentSelect Label="Search Parameter Options" ValueChanged="@(e => FilterSearchOption = e)" TOption="string">
                <FluentOption Value="author">First Name</FluentOption>
                <FluentOption Value="title">Last Name</FluentOption>
                <FluentOption Value="publications">Publications</FluentOption>
            </FluentSelect>

            <br />
            <br />

            <FluentButton OnClick="@(()=> navigation.NavigateTo("/addAuthor"))">Add Author</FluentButton>

            <br />
            <br />

            <FluentCheckbox @bind-Value="hideFirstColumn">Hide First Name</FluentCheckbox>
            <FluentCheckbox @bind-Value="hideLastColumn">Hide Last Name</FluentCheckbox>
            <FluentCheckbox @bind-Value="hidePublicationsColumn">Hide Publications</FluentCheckbox>

        </FluentCard>
    </FluentStack>
</FluentCard>

<FluentDataGrid Items="@authors" >

    <PropertyColumn Property="@(b => b.AuthorId)" Sortable="true" />
    
    @if (!hideFirstColumn)
    {
        <PropertyColumn Property="@(b => b.FirstName)" Sortable="true" />
    }
    @if (!hideLastColumn)
    {
        <PropertyColumn Property="@(b => b.LastName)" Sortable="true" />
    }
    @if (!hidePublicationsColumn)
    {
        <PropertyColumn Property="@(b => b.Publications)" Sortable="true" />
    }

    <TemplateColumn>
        <FluentButton OnClick="@(()=> navigation.NavigateTo($"/bookDetails/{context.AuthorId}"))">Edit</FluentButton>
        <FluentButton OnClick="@(()=> RemoveAuthor(context.AuthorId))">Remove</FluentButton>
    </TemplateColumn>

</FluentDataGrid>

@code {
    public IQueryable<AuthorViewModel> authors { get; set; }

    private bool displayAuthor = true;

    bool hideFirstColumn = false;
    bool hideLastColumn = false;
    bool hidePublicationsColumn = false;

    string? FilterSearchOption = "author";

    private async Task FindAuthor(ChangeEventArgs args)
    {
        var input = args.Value.ToString();

        if (string.IsNullOrWhiteSpace(input))
        {
            authors = (await http.GetFromJsonAsync<List<AuthorViewModel>>("api/authors")).AsQueryable();
        }
        else
        {
            authors = (await http.GetFromJsonAsync<List<AuthorViewModel>>("api/authors")).AsQueryable();

            if (FilterSearchOption == "firstName")
            {
                authors = authors.Where(b => b.FirstName.ToLower().StartsWith(input)).AsQueryable();
            }
            else if (FilterSearchOption == "lastName")
            {
                authors = authors.Where(b => b.LastName.ToLower().StartsWith(input)).AsQueryable();
            }
            // else if (FilterSearchOption == "publications")
            // {
            //     authors = authors.Where(b => b.Publications.ToLower().StartsWith(input)).AsQueryable();
            // }
            
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        authors = (await http.GetFromJsonAsync<List<AuthorViewModel>>("api/authors")).AsQueryable();
    }

    private async Task RemoveAuthor(int authorId)
    {
        await http.DeleteAsync($"/api/author/{authorId}");
        authors = (await http.GetFromJsonAsync<List<AuthorViewModel>>("api/authors")).AsQueryable();
    }

}
