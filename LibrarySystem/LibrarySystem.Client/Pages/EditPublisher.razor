@page "/publisherDetails/{publisherId:int}"
@using LibrarySystem.Models
@inject HttpClient http
@inject NavigationManager navigation

<h3>Publisher Editor</h3>

<EditForm Model="@publisher" OnValidSubmit="HandleValidSubmit" FormName="PublisherForm">
    <FluentStack Orientation="Orientation.Vertical">
        <FluentNumberField @bind-Value="publisher.PublisherId" Label="publisherId" TValue="int" ReadOnly></FluentNumberField>
        <FluentTextField @bind-Value="publisher.Name" Label="Name"></FluentTextField>
        <FluentTextField @bind-Value="publisher.Address" Label="Address"></FluentTextField>
        <FluentNumberField @bind-Value="publisher.EstablishedYear" Label="Established Year"></FluentNumberField>
        <FluentStack Orientation="Orientation.Horizontal">
            <FluentButton Type="ButtonType.Submit">Save</FluentButton>
            <FluentButton OnClick="@(()=> navigation.NavigateTo("/publisherList"))">Cancel</FluentButton>
        </FluentStack>

    </FluentStack>
</EditForm>
@code {
    [Parameter]
    public int publisherId { get; set; }
    [SupplyParameterFromForm]
    public PublisherViewModel publisher { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        publisher = await http.GetFromJsonAsync<PublisherViewModel>($"/api/publisher/{publisherId}");
    }

    private async Task HandleValidSubmit()
    {
        await http.PutAsJsonAsync($"/api/publisher/{publisherId}", publisher);
        navigation.NavigateTo("/publisherList");
    }
}
