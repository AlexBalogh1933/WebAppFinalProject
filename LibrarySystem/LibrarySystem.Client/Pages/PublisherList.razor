@page "/publisherList"
@using LibrarySystem.Models
@inject HttpClient http
@inject NavigationManager navigation

<h3>List of Publisher</h3>
<FluentStack Orientation="Orientation.Horizontal">
    <FluentCard>
        <FluentTextField Label="Search Publisher" @oninput="FindPublisher"></FluentTextField>

        <FluentButton OnClick="@(()=> navigation.NavigateTo("/addPublisher"))">Add Publisher</FluentButton>

    </FluentCard>
</FluentStack>

<FluentDataGrid Items="@publishers" AdditionalAttributes="formStyle">

    <PropertyColumn Property="@(b => b.PublisherId)" Sortable="true" />
    <PropertyColumn Property="@(b => b.Name)" Sortable="true" />
    <PropertyColumn Property="@(b => b.Address)" Sortable="true" />
    <PropertyColumn Property="@(b => b.EstablishedYear)" Sortable="true" />

    <TemplateColumn>
        <FluentButton OnClick="@(()=> navigation.NavigateTo($"/editPublisher/{context.PublisherId}"))">Edit</FluentButton>
        <FluentButton OnClick="@(()=> RemovePublisher(context.PublisherId))">Remove</FluentButton>
    </TemplateColumn>


</FluentDataGrid>

@code {
    public IQueryable<PublisherViewModel> publishers { get; set; }

    private async Task FindPublisher(ChangeEventArgs args)
    {
        var filter = args.Value as string;

        if (string.IsNullOrWhiteSpace(filter))
        {
            publishers = (await http.GetFromJsonAsync<List<PublisherViewModel>>("api/publishers")).AsQueryable();
        }
        else
        {
            publishers = publishers.Where(x => x.Name.Contains(filter)).AsQueryable();

        }
    }

    protected override async Task OnParametersSetAsync()
    {
        publishers = (await http.GetFromJsonAsync<List<PublisherViewModel>>("api/publishers")).AsQueryable();
    }

    Dictionary<string, object> formStyle { get; set; } = new()
    {
        {"width", "100"}
    };

    private async Task RemovePublisher(int publisherId)
    {
        await http.DeleteAsync($"/api/publisher/{publisherId}");
        publishers = (await http.GetFromJsonAsync<List<PublisherViewModel>>("api/publishers")).AsQueryable();
    }

}
