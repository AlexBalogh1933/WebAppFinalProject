@using LibrarySystem.Models
@inject HttpClient http

<FluentButton IconStart="@(new Icons.Regular.Size16.ThumbLike())" OnClick="FindTop3LikedBooks">
    @buttonMessage
</FluentButton>

@code {
    [Parameter]
    public EventCallback<IQueryable<BookAuthorJoinViewModel>> onTop3LikedBooksClick { get; set; }

    [Parameter]
    public IQueryable<BookAuthorJoinViewModel>? Books { get; set; }

    bool showingLikedBooks = false;
    string buttonMessage = "Show top 3 best rated books";

    private async Task FindTop3LikedBooks()
    {
        if (showingLikedBooks)
        {
            var booksTable = (await http.GetFromJsonAsync<List<BookViewModel>>("api/books")).AsQueryable();
            var AuthorTable = (await http.GetFromJsonAsync<List<AuthorViewModel>>("api/authors")).AsQueryable();
            var AuthorBookTable = (await http.GetFromJsonAsync<List<AuthorBookViewModel>>("api/authorbooks")).AsQueryable();

            var allBooks = (from booktb in booksTable
                          join authorbooktb in AuthorBookTable on booktb.BookId equals authorbooktb.BookId
                          join authortb in AuthorTable on authorbooktb.AuthorId equals authortb.AuthorId
                          select new BookAuthorJoinViewModel
                              {
                                  Book = booktb,
                                  Author = authortb,

                              }).AsQueryable();

            await onTop3LikedBooksClick.InvokeAsync(allBooks);
            showingLikedBooks = false;
            buttonMessage = "Show top 3 best rated books";
        }
        else
        {
            var top3LikedBooks =
            (from book in Books
             orderby book.Book.NumberOfLikes
             select book).
                Take(3)
                .AsQueryable();
            await onTop3LikedBooksClick.InvokeAsync(top3LikedBooks);
            showingLikedBooks = true;

            buttonMessage = "Show all Books";

        }
    }
}
